#include "Rover.h"
//212 - Nazarov - Zakhar

Rover::Rover(int Header, int Gap, double Angle_A, double Angle_B, int Velocity, Field& Off_road)
	: Header{ Header }, Gap{ Gap }, Angle_A{ Angle_A }, Angle_B{ Angle_B }, Velocity{ Velocity }, Off_road{ Off_road } {
}

Rover::Rover() : Header{ 0 }, Gap{ 0 }, Angle_A{ 0 }, Angle_B{ 0 }, Velocity{ 0 } {
}

int Rover::angles(int x0, int y0, int x, int y) {
	int i;
	int j;
	int xt = (0 < x - x0) - (0 > x - x0);
	int yt = (0 < y - y0) - (0 > y - y0);
	if (xt != 0 && yt != 0) {
		for (i = x0; i <= x; i += xt) {
			for (j = x0; j <= x; j += xt) {
				if (abs(Off_road.Pixel[i][j] - Off_road.Pixel[i + xt][j + yt]) > Angle_A) {
					return 0;
				}
				if (abs(Off_road.Pixel[i][j] - Off_road.Pixel[i - xt][j - yt]) > Angle_A) {
					return 0;
				}
				if (abs(Off_road.Pixel[i][j] - Off_road.Pixel[i + xt][j - yt]) > Angle_B) {
					return 0;
				}
				if (abs(Off_road.Pixel[i][j] - Off_road.Pixel[i - xt][j + yt]) > Angle_B) {
					return 0;
				}
			}
		}
	}
	if (yt == 0) {
		for (i = x0; i <= x; i += xt) {
			if (abs(Off_road.Pixel[i][y] - Off_road.Pixel[i + xt][y]) > Angle_A) {
				return 0;
			}
			if (abs(Off_road.Pixel[i][y] - Off_road.Pixel[i - xt][y]) > Angle_A) {
				return 0;
			}
			if (abs(Off_road.Pixel[i][y] - Off_road.Pixel[i][y + 1]) > Angle_B) {
				return 0;
			}
			if (abs(Off_road.Pixel[i][y] - Off_road.Pixel[i][y - 1]) > Angle_B) {
				return 0;
			}
		}
	}
	if (xt == 0) {
		for (j = y0; j <= y; j += yt) {
			if (abs(Off_road.Pixel[x][j] - Off_road.Pixel[x][j + yt]) > Angle_A) {
				return 0;
			}
			if (abs(Off_road.Pixel[x][j] - Off_road.Pixel[x][j - yt]) > Angle_A) {
				return 0;
			}
			if (abs(Off_road.Pixel[x][j] - Off_road.Pixel[x + 1][j]) > Angle_B) {
				return 0;
			}
			if (abs(Off_road.Pixel[x][j] - Off_road.Pixel[x - 1][j]) > Angle_B) {
				return 0;
			}
		}
	}
        return 1;
}

int Rover::sensor(int x0, int y0, int x, int y) {
    int i, j;
	int xt = (0 < x - x0) - (0 > x - x0);
	int yt = (0 < y - y0) - (0 > y - y0);
	if (yt == 0) {
		for (i = x0; i <= x; i += xt) {
			if (Off_road.Pixel[i + xt][y] - Off_road.Pixel[i][y] > Gap) {
				return 0;
			}
			if (Off_road.Pixel[i + xt][y - 1] - Off_road.Pixel[i][y - 1] > Gap) {
				return 0;
			}
			if (Off_road.Pixel[i + xt][y + 1] - Off_road.Pixel[i][y + 1] > Gap) {
				return 0;
			}
		}
	}
	if (xt == 0) {
		for (j = y0; j <= y; j += yt) {
			if (Off_road.Pixel[x][j + yt] - Off_road.Pixel[x][j] > Gap) {
				return 0;
			}
			if (Off_road.Pixel[x - 1][j + yt] - Off_road.Pixel[x - 1][j] > Gap) {
				return 0;
			}
			if (Off_road.Pixel[x + 1][j + yt] - Off_road.Pixel[x + 1][j] > Gap) {
				return 0;
			}
		}
	}
	if (xt != 0 && yt != 0) {
		for (i = x0; i <= x; i += xt) {
			for (j = x0; j <= x; j += xt) {
				if (Off_road.Pixel[i - xt][j] - Off_road.Pixel[i][j + yt] > Gap) {
					return 0;
				}
				if (Off_road.Pixel[i][j] - Off_road.Pixel[i + xt][j + yt] > Gap) {
					return 0;
				}
				if (Off_road.Pixel[i][j - yt] - Off_road.Pixel[i + yt][j] > Gap) {
					return 0;
				}
			}
		}
	}
        return 1;
}